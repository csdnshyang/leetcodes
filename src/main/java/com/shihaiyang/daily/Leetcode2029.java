package com.shihaiyang.daily;

// 2029. 石子游戏 IX.[博弈8ms]
public class Leetcode2029 {
    public static void main(String[] args) {
        Solution2029 solution2029 = new Solution2029();
        boolean stoneGameIX = solution2029.stoneGameIX(new int[]{1,1,7,10,8,17,10,20,2,10});
//        boolean stoneGameIX = solution2029.stoneGameIX(new int[]{2,1});
        System.out.println(stoneGameIX);
    }
}
/**
 *Alice 和 Bob 再次设计了一款新的石子游戏。现有一行 n 个石子，每个石子都有一个关联的数字表示它的价值。给你一个整数数组 stones ，其中 stones[i] 是第 i 个石子的价值。
 * Alice 和 Bob 轮流进行自己的回合，Alice 先手。每一回合，玩家需要从 stones 中移除任一石子。
 * 如果玩家移除石子后，导致 所有已移除石子 的价值 总和 可以被 3 整除，那么该玩家就 输掉游戏 。
 * 如果不满足上一条，且移除后没有任何剩余的石子，那么 Bob 将会直接获胜（即便是在 Alice 的回合）。
 * 假设两位玩家均采用 最佳 决策。如果 Alice 获胜，返回 true ；如果 Bob 获胜，返回 false 。
 * 示例 1：
 * 输入：stones = [2,1]
 * 输出：true
 * 解释：游戏进行如下：
 * - 回合 1：Alice 可以移除任意一个石子。
 * - 回合 2：Bob 移除剩下的石子。
 * 已移除的石子的值总和为 1 + 2 = 3 且可以被 3 整除。因此，Bob 输，Alice 获胜。
 * 示例 2：
 * 输入：stones = [2]
 * 输出：false
 * 解释：Alice 会移除唯一一个石子，已移除石子的值总和为 2 。
 * 由于所有石子都已移除，且值总和无法被 3 整除，Bob 获胜。
 * 示例 3：
 * 输入：stones = [5,1,2,4,3]
 * 输出：false
 * 解释：Bob 总会获胜。其中一种可能的游戏进行方式如下：
 * - 回合 1：Alice 可以移除值为 1 的第 2 个石子。已移除石子值总和为 1 。
 * - 回合 2：Bob 可以移除值为 3 的第 5 个石子。已移除石子值总和为 = 1 + 3 = 4 。
 * - 回合 3：Alices 可以移除值为 4 的第 4 个石子。已移除石子值总和为 = 1 + 3 + 4 = 8 。
 * - 回合 4：Bob 可以移除值为 2 的第 3 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 = 10.
 * - 回合 5：Alice 可以移除值为 5 的第 1 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 + 5 = 15.
 * Alice 输掉游戏，因为已移除石子值总和（15）可以被 3 整除，Bob 获胜。
 * [1,1,7,10,8,17,10,20,2,10]
 * true
 */

/**
 * 博弈类
 * 说实话，这个题是目前做的第一个一天还没完全捋明白的题。先记录下来。后面还得再来一次吧。
 *
 * 本来我以为这个就是一个遍历...结果是博弈。知识又增加了。
 *
 * 就自己现在所理解的记录一下。
 * 因为2人要保证和不被3整除，把石子价值k%3之后得0，1，2的价值。
 *
 * 0不改变总和，但是改变换手，A拿0，则A跳过一轮，该B拿石子了。
 *
 * 另外0如果是奇数，则改变一次换手。
 * 如果0是偶数，则相互抵消A换手一次到B，B又换手一次到A。
 *
 * 先考虑没有0的情况。
 * 如果只有1、2两种石子。并且如果最终拿完了都没凑成3的和，那就直接是B赢的背景下：
 * 那么如果A先手想要赢的话，只能让B只有一个拿一个就凑成3的倍数这一种选择。
 * A先手有两个选择，先手1和先手2.
 * 如果先手1.那么唯一可能的各自拿取的顺序为：1,1,2,1,2,1...
 * 这种顺序能一直保证持续拿下去，怎么才能让B输呢，就是让B只有2可以拿，如果B只能拿2，那就只能凑成和为3的倍数。
 * 那么应该是这样的顺序  1.1.2.1.2.`2`  最后只能是2.
 * 得出结论是，如果A先手1，那么如果arr2>=arr1，那么A就能赢，换个方向，如果A先手时，发现arr2>=arr1 那么他先手拿1一定赢
 *
 *
 * 同理如果先手2.那么一直持续下去的顺序 2,2,1,2,1,2...
 * 这个顺序能一直保持下去，怎么让B叔，就是让B最后只能拿1.如果B拿1，就能凑成3的倍数
 * 那么应该有这样的顺序  2.2.1.2.1.1 最后只能是1.
 * 得出结论，如果A先手2，那么arr1>=arr2的时候，A就能赢，换个方向，如果A先手时，发现arr1>=arr2那么A先手拿2一定赢。
 *
 * 综合这两种情况，发现只要不发生有0价值的换手，不论有多少个数石子，只要A先手都能以B拿石子凑成3倍数的情况获得胜利。
 * 但是必须至少要有1个1，1个2才可。
 *
 * 所以第一个条件，当arr0&1==0，为偶数时，arr1>=1&&arr2>=1时就可以胜利
 *
 *
 * 如果0的个数有奇数个，偶数可抵消，就等价于有1个。
 * 那么可能出现的场景是
 * A先手1   1,1,2,1,2,`0`,1,`1`     B在该拿1的时候，拿了0，此时A下一次就拿了1，想让B输，只能让B再选1才可。
 * 所以arr1-arr2>2    2个2，得有5个1.
 *
 * 同理A先手2  2,2,1,2,1,`0`,2,`2`   B在该拿2的时候，拿了0，此时A下一次就拿了1，想让B输，只能让B再选2才可。
 * 所以arr2-arr1>2    2个1，得有5个2.
 *
 * 所以当A先手发现有1个0时，需要判断，如果1和2中某一个数量比另一个数量大于等于3个时，那就选多的那个先手。
 * 就是第二个条件，当arr0&1==1，为奇数时，arr1-arr2>2 || arr2-arr1>2
 *
 */
class Solution2029 {
    public boolean stoneGameIX(int[] stones) {
        int arr0 = 0, arr1 = 0, arr2 = 0;
        for (int i = 0; i < stones.length; i++) {
            if (stones[i] % 3 == 0) {
                arr0++;
            } else if (stones[i] % 3 == 1) {
                arr1++;
            } else {
                arr2++;
            }
        }
        if ((arr0 & 1) == 0) {
            return arr1 >= 1 && arr2 >= 1;
        }
        return arr1 - arr2 > 2 || arr2 - arr1 > 2;
    }
}
